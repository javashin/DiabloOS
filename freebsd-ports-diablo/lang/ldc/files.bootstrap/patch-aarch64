- Upstreamed aarch64 support patch (but not merged into ldc's fork):
  https://github.com/dlang/druntime/pull/2269
- Remove failing (on aarch64) static assert in bootstrap compiler's math function

--- runtime/druntime/src/core/sys/posix/setjmp.d.orig	2018-12-15 16:48:11 UTC
+++ runtime/druntime/src/core/sys/posix/setjmp.d
@@ -163,6 +163,12 @@ else version( FreeBSD )
         enum _JBLEN = 5;
         struct _jmp_buf { c_long[_JBLEN + 1] _jb; }
     }
+    else version( AArch64 )
+    {
+        enum _JBLEN = 31;
+        // __int128_t
+        struct _jmp_buf { long[2][_JBLEN + 1] _jb; };
+    }
     else
         static assert(0);
     alias _jmp_buf[1] jmp_buf;
@@ -249,6 +255,11 @@ else version( FreeBSD )
         enum _JB_SIGMASK    = 3;
         enum _JB_SIGFLAG    = 5;
         struct _sigjmp_buf { c_long[_JBLEN + 1] _sjb; }
+    }
+    else version( AArch64 )
+    {
+        // __int128_t
+        struct _sigjmp_buf { long[2][_JBLEN + 1] _jb; };
     }
     else
         static assert(0);
--- runtime/druntime/src/core/sys/posix/ucontext.d.orig	2018-12-15 16:48:11 UTC
+++ runtime/druntime/src/core/sys/posix/ucontext.d
@@ -686,6 +686,38 @@ else version( FreeBSD )
             int[6]          mc_spare2;
         }
     }
+    else version( AArch64 )
+    {
+        alias __register_t = long;
+
+        struct gpregs
+        {
+            __register_t[30] gp_x;
+            __register_t     gp_lr;
+            __register_t     gp_sp;
+            __register_t     gp_elr;
+            uint             gp_spsr;
+            int              gp_pad;
+        }
+
+        struct fpregs
+        {
+            ulong[2][32]    fp_q; // __uint128_t
+            uint            fp_sr;
+            uint            fp_cr;
+            int             fp_flags;
+            int             fp_pad;
+        }
+
+        struct mcontext_t
+        {
+            gpregs          mc_gpregs;
+            fpregs          mc_fpregs;
+            int             mc_flags;
+            int             mc_pad;
+            ulong[8]        mc_spare;
+        }
+    }

     // <ucontext.h>
     enum UCF_SWAPPED = 0x00000001;
--- runtime/phobos/std/internal/math/gammafunction.d.orig	2019-04-20 23:21:36 UTC
+++ runtime/phobos/std/internal/math/gammafunction.d
@@ -1654,7 +1654,6 @@ real logmdigammaInverse(real y)
 {
     import std.numeric: findRoot;
     enum maxY = logmdigamma(real.min_normal);
-    static assert(maxY > 0 && maxY <= real.max);

     if (y >= maxY)
     {
